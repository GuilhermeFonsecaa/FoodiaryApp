# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: guilhermefb
# "service" is the name of this project. This will also be added to your AWS resource names.
service: foodiary-api

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs22.x
  architecture: arm64
  environment:
    DATABASE_URL: ${env:DATABASE_URL}
    JWT_SECRET: ${env:JWT_SECRET}
    BUCKET_NAME: !Ref UploadsBucket
    MEALS_QUEUE_URL: !Ref MealsQueue
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: !Sub "${UploadsBucket.Arn}/*" # !Sub -> usado para interpolar
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource: !GetAtt MealsQueue.Arn

package:
  individually: true # Invés de gerar um zip de todas as lambdas juntas, zipa cada lambda individualmente

build:
  esbuild:
    minify: true
    sourcemap: false

functions:
  signin:
    handler: src/functions/signin.handler
    events:
      - httpApi:
          path: /signin
          method: POST

  signup:
    handler: src/functions/signup.handler
    events:
      - httpApi:
          path: /signup
          method: POST

  me:
    handler: src/functions/me.handler
    events:
      - httpApi:
          path: /me
          method: GET

  createMeal:
    handler: src/functions/createMeal.handler
    events:
      - httpApi:
          path: /meals
          method: POST

  listMeals:
    handler: src/functions/listMeals.handler
    events:
      - httpApi:
          path: /meals
          method: GET

  getMealById:
    handler: src/functions/getMealById.handler
    events:
      - httpApi:
          path: /meals/{mealId}
          method: GET

  fileUploadedEvent:
    handler: src/functions/fileUploadedEvent.handler
    events:
      - s3:
          bucket: !Ref UploadsBucket
          event: s3:ObjectCreated:*
          existing: true
          forceDeploy: true

  processMeal: 
    handler: src/functions/processMeal.handler
    events: 
      - sqs: 
          arn: !GetAtt MealsQueue.Arn
          batchSize: 1 #Quando uma mensagem chegar na fila MealsQueue, envia 1 mensagem por vez para a função Lambda

resources:
  Resources:
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: foodiary-app-upload-files

    MealsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: meals-queue
        VisibilityTimeout: 60 #Define, em segundos, por quanto tempo a mensagem fica invisível após ser recebida (se a aplicação não excluí‑la com sucesso, ela reaparece na fila passado esse tempo, pois provavelmente deu algum erro).
        RedrivePolicy:
          maxReceiveCount: 1 #Não deu certo na primeira vez faz o redrive
          deadLetterTargetArn: !GetAtt MealsDLQ.Arn

    MealsDLQ: #Dead Letter Queue(DLQ)
      Type: AWS::SQS::Queue
      Properties:
        QueueName: meals-queue-dlq
